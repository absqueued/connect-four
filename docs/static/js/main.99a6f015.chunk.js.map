{"version":3,"sources":["utils.js","constants.js","Start/index.js","Board/header.js","Board/board.js","Board/footer.js","Board/index.js","App/index.js","index.js"],"names":["log","console","APP_DEFAULTS","starterColor","allColors","rows","cols","GAME_STATE","Logo","size","className","Start","onStart","onClick","playerRed","prompt","playerBlue","localforage","setItem","red","blue","then","v","type","rel","Player","name","theme","BoardHeader","player","BoardGrid","currentPlayer","onPlayerMoves","Array","from","length","useState","allUsers","setAllUsers","x","y","p","positions","setPositions","hasDisc","find","pos","getItem","usr","Object","keys","changeTurn","newPlayer","filter","c","join","useEffect","map","r","disc","nextAvailableYPos","yi","makeMove","uuidv4","BoardFooter","onChange","clear","Board","setCurrentPlayer","App","start","setStart","state","config","storeName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99a6f015.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/** Utils */\n\nexport const log = (...m) => console.log(...m);","/** App Constants */\n\nconst APP_DEFAULTS = {\n  starterColor: 'blue',\n  allColors: ['blue', 'red'],\n  rows: 6,\n  cols: 7\n};\n\nconst GAME_STATE = {\n  start: \"game.start\",\n};\n\nexport { APP_DEFAULTS, GAME_STATE };\n","/* Start */\nimport localforage from \"localforage\";\n\nimport { log } from \"../utils\"; // eslint-disable-line\nimport { APP_DEFAULTS, GAME_STATE } from \"../constants\";\n\n\nconst Logo = ({ size = \"md\" }) => {\n  return (\n    <div className={`logo-wrap logo-wrap--${size}`}>\n      <h1 className=\"logo\">\n        <span>\"Connect</span> <span>Four\"</span>\n      </h1>\n    </div>\n  );\n};\n\nconst Start = ({ onStart }) => {\n\n  const startGame = () => {\n    const playerRed = prompt(\"Player One name?\");\n    const playerBlue = prompt(\"Player Two name?\");\n\n    if(!playerRed || !playerBlue) return false;\n    \n    localforage.setItem('currentPlayer', APP_DEFAULTS.starterColor);\n    \n    localforage\n      .setItem(\"users\", {\n        red: playerRed,\n        blue: playerBlue,\n      })\n      .then(() => {\n        localforage.setItem(GAME_STATE.start, true).then(v => {\n          onStart(v);\n        });\n      });\n  };\n  return (\n    <section className=\"page page--start\">\n      <Logo />\n      <p>Simple as a straight line</p>\n      <button\n        onClick={startGame}\n        type=\"button\"\n        className=\"btn-start\"\n        rel=\"noopener noreferrer\"\n      >\n        Play Now\n      </button>\n    </section>\n  );\n};\n\nexport { Start, Logo };\n","/** Grid */\n\nimport { log } from \"../utils\"; // eslint-disable-line\n\nimport { Logo } from \"../Start\";\n\nconst Player = ({ name = \"John\", theme = 'blue'}) => {\n  return (\n    <div className={`player player--${theme}`}>TURN: {name}</div>\n  );\n};\n\nconst BoardHeader = ({theme, player}) => {\n\n  return (\n      <header>\n        <Logo size=\"sm\" />\n        <Player name={player} theme={theme} />\n      </header>\n  );\n};\n\nexport { BoardHeader };\n","/** Grid */\n\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport localforage from \"localforage\";\n\nimport { log } from \"../utils\"; // eslint-disable-line\nimport { APP_DEFAULTS } from '../constants';\n\nconst BoardGrid = ({currentPlayer, onPlayerMoves}) => {\n  const rows = Array.from({length: APP_DEFAULTS.rows});\n  const cols = Array.from({length: APP_DEFAULTS.cols});  \n  const [ allUsers, setAllUsers ] = useState({});\n  const [ positions, setPositions ] = useState([\n    {x: 5, y: 5, p: 'blue'},\n    {x: 1, y: 5, p: 'red'}\n  ]);\n\n  const isWinner = () => {\n    const winner = false;\n    const redPos = positions.filter(pos => pos.p === 'red')\n    const bluePos = positions.filter(pos => pos.p === 'blue')\n\n    log(positions);\n    // if(bluePos.length > 3) {\n    //   bluePos.forEach(p => {\n    //     // check\n    //   })\n    // }    \n  }\n\n  const hasDisc = (x, y) => {\n    return positions.find(pos => pos.x === x && pos.y === y);\n  }\n\n  const makeMove = (x, y, p) => {\n    let anyDisc = null;\n    let nextAvailableYPos = -1;\n    for(let yi = rows.length - 1; yi >=0; yi--) {\n      anyDisc = hasDisc(x, yi);\n      if(!anyDisc) {\n        nextAvailableYPos = yi;\n        break;\n      }\n    }\n\n    if (nextAvailableYPos === -1){ return false }\n    setPositions(positions => [...positions, { x, y: nextAvailableYPos, p }]);        \n    changeTurn(p);\n  }\n\n  localforage.getItem('users').then(usr => {\n    if(!Object.keys(allUsers).length) setAllUsers(usr);\n  })\n\n  const changeTurn = currentPlayer => {\n    const newPlayer = APP_DEFAULTS.allColors.filter(c => c !== currentPlayer).join('');\n    localforage.setItem('currentPlayer', newPlayer).then(v => {\n      onPlayerMoves(v)\n    })\n  };\n\n  useEffect(() => {\n    const winner = isWinner();\n  }, [positions ]);\n\n\n  return (\n      <article>\n        <div className={`board-grid board-grid--${currentPlayer}`}>\n          {cols.map((c, x) => (\n            <div\n              key={uuidv4()}\n              className=\"box-row\">\n              \n              {\n                rows.map((r, y) => {\n                  const disc = hasDisc(x, y);\n                  return (\n                  <div\n                    key={uuidv4()}\n                    onClick={() => makeMove(x, y, currentPlayer) }\n                    className={`box box--${disc ? disc.p : ''}`}>\n                    {`Box x: ${x}, y: ${y}`}\n                  </div>\n                )})\n              }\n            </div>\n          ))}\n        </div>\n      </article>\n  );\n};\n\nexport { BoardGrid };\n","/** Grid */\n\n// import { useState } from \"react\";\nimport localforage from \"localforage\";\n\nimport { log } from \"../utils\"; // eslint-disable-line\nimport { GAME_STATE } from \"../constants\";\n\nconst BoardFooter = ({onChange}) => {\n  const reset = () => {\n    localforage.clear();\n    onChange(false);\n  };\n\n  const quit = () => {\n    localforage.setItem(GAME_STATE.start, false).then(v => {\n      onChange(v);\n    });\n    log(\"Quit\");\n  };\n  return (\n    <footer>\n      <button className=\"btn-tb btn-tb--p\" onClick={() => reset()}>\n        Reset\n      </button>\n      <button className=\"btn-tb btn-tb--d\" onClick={() => quit()}>\n        Quit\n      </button>\n    </footer>\n  );\n};\n\n\nexport { BoardFooter };\n","/** Grid */\n\nimport { useState } from 'react';\nimport localforage from \"localforage\";\n\nimport { log } from \"../utils\"; // eslint-disable-line\nimport { BoardHeader } from \"./header\";\nimport { BoardGrid } from \"./board\";\nimport { BoardFooter } from \"./footer\";\nimport { APP_DEFAULTS } from '../constants';\n\nconst Board = ({onChange}) => {\n  const [ currentPlayer, setCurrentPlayer ] = useState(APP_DEFAULTS.starterColor);\n  const [ allUsers, setAllUsers ] = useState({});\n\n  localforage.getItem('users').then(usr => {\n    if(!Object.keys(allUsers).length) setAllUsers(usr);\n  })\n\n  return (\n    <section className=\"board\">      \n      <BoardHeader theme={currentPlayer} player={allUsers[currentPlayer]} />\n      <BoardGrid currentPlayer={currentPlayer} onPlayerMoves={(v) => setCurrentPlayer(v) } />\n      <BoardFooter onChange={onChange} />\n    </section>\n  );\n};\n\nexport { Board };\n","import { useState } from 'react';\nimport localforage from \"localforage\";\n\nimport { log } from '../utils'; // eslint-disable-line\nimport { GAME_STATE } from '../constants';\nimport { Start } from '../Start';\nimport { Board } from '../Board';\n\nfunction App() {\n  const [ start, setStart ] = useState(false);\n\n  localforage.getItem(GAME_STATE.start).then(state => {\n    setStart(state);\n  });\n\n  return (\n    <main>\n      {!start && <Start onStart={v => setStart(v)} />}\n      {start && <Board onChange={v => setStart(v)} />}\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport localforage from 'localforage';\n\nimport { log } from './utils'; // eslint-disable-line\n\nimport './scss/index.scss';\nimport App from './App';\nimport { GAME_STATE } from './constants';\n\n// For local sessions\nlocalforage.config({\n  name: 'C4_ConnectFour',\n  storeName: 'C4_Store'\n});\n\nlocalforage.getItem(GAME_STATE.start).then(v => {\n  if(!v) localforage.setItem(GAME_STATE.start, false);\n});\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}